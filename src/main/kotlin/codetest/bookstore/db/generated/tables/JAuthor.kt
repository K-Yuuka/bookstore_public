/*
 * This file is generated by jOOQ.
 */
package codetest.bookstore.db.generated.tables


import codetest.bookstore.db.generated.JPublic
import codetest.bookstore.db.generated.indexes.AUTHOR_IX3
import codetest.bookstore.db.generated.keys.AUTHOR_IX1
import codetest.bookstore.db.generated.keys.AUTHOR_PKC
import codetest.bookstore.db.generated.keys.BOOK_AUTHOR__BOOK_AUTHOR_FK1
import codetest.bookstore.db.generated.tables.JBook.JBookPath
import codetest.bookstore.db.generated.tables.JBookAuthor.JBookAuthorPath
import codetest.bookstore.db.generated.tables.records.JAuthorRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JAuthor(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JAuthorRecord>?,
    parentPath: InverseForeignKey<out Record, JAuthorRecord>?,
    aliased: Table<JAuthorRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<JAuthorRecord>(
    alias,
    JPublic.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.author</code>
         */
        val AUTHOR: JAuthor = JAuthor()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JAuthorRecord> = JAuthorRecord::class.java

    /**
     * The column <code>public.author.author_id</code>.
     */
    val AUTHOR_ID: TableField<JAuthorRecord, Int?> =
        createField(DSL.name("author_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.author.author_name</code>.
     */
    val AUTHOR_NAME: TableField<JAuthorRecord, String?> =
        createField(DSL.name("author_name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<JAuthorRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<JAuthorRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<JAuthorRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>public.author</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>public.author</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>public.author</code> table reference
     */
    constructor() : this(DSL.name("author"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, JAuthorRecord>?,
        parentPath: InverseForeignKey<out Record, JAuthorRecord>?
    ) : this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, AUTHOR, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class JAuthorPath : JAuthor, Path<JAuthorRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, JAuthorRecord>?,
            parentPath: InverseForeignKey<out Record, JAuthorRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<JAuthorRecord>) : super(alias, aliased)

        override fun `as`(alias: String): JAuthorPath = JAuthorPath(DSL.name(alias), this)
        override fun `as`(alias: Name): JAuthorPath = JAuthorPath(alias, this)
        override fun `as`(alias: Table<*>): JAuthorPath = JAuthorPath(alias.qualifiedName, this)
    }

    override fun getSchema(): Schema? = if (aliased()) null else JPublic.PUBLIC
    override fun getIndexes(): List<Index> = listOf(AUTHOR_IX3)
    override fun getIdentity(): Identity<JAuthorRecord, Int?> = super.getIdentity() as Identity<JAuthorRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<JAuthorRecord> = AUTHOR_PKC
    override fun getUniqueKeys(): List<UniqueKey<JAuthorRecord>> = listOf(AUTHOR_IX1)

    private lateinit var _bookAuthor: JBookAuthorPath

    /**
     * Get the implicit to-many join path to the <code>public.book_author</code>
     * table
     */
    fun bookAuthor(): JBookAuthorPath {
        if (!this::_bookAuthor.isInitialized)
            _bookAuthor = JBookAuthorPath(this, null, BOOK_AUTHOR__BOOK_AUTHOR_FK1.inverseKey)

        return _bookAuthor
    }

    val bookAuthor: JBookAuthorPath
        get(): JBookAuthorPath = bookAuthor()

    /**
     * Get the implicit many-to-many join path to the <code>public.book</code>
     * table
     */
    val book: JBookPath
        get(): JBookPath = bookAuthor().book()

    override fun `as`(alias: String): JAuthor = JAuthor(DSL.name(alias), this)
    override fun `as`(alias: Name): JAuthor = JAuthor(alias, this)
    override fun `as`(alias: Table<*>): JAuthor = JAuthor(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JAuthor = JAuthor(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JAuthor = JAuthor(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JAuthor = JAuthor(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): JAuthor =
        JAuthor(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JAuthor = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): JAuthor = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): JAuthor = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): JAuthor = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): JAuthor = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JAuthor =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JAuthor =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JAuthor = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JAuthor = where(DSL.notExists(select))
}
