/*
 * This file is generated by jOOQ.
 */
package codetest.bookstore.db.generated.tables.records


import codetest.bookstore.db.generated.tables.JBookAuthor

import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JBookAuthorRecord() : UpdatableRecordImpl<JBookAuthorRecord>(JBookAuthor.BOOK_AUTHOR) {

    open var bookId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var authorId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Int?, Int?> = super.key() as Record2<Int?, Int?>

    /**
     * Create a detached, initialised JBookAuthorRecord
     */
    constructor(bookId: Int? = null, authorId: Int? = null): this() {
        this.bookId = bookId
        this.authorId = authorId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised JBookAuthorRecord
     */
    constructor(value: codetest.bookstore.db.generated.tables.pojos.JBookAuthor?): this() {
        if (value != null) {
            this.bookId = value.bookId
            this.authorId = value.authorId
            resetChangedOnNotNull()
        }
    }
}
