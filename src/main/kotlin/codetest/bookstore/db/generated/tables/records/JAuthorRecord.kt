/*
 * This file is generated by jOOQ.
 */
package codetest.bookstore.db.generated.tables.records


import codetest.bookstore.db.generated.tables.JAuthor

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JAuthorRecord() : UpdatableRecordImpl<JAuthorRecord>(JAuthor.AUTHOR) {

    open var authorId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var authorName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised JAuthorRecord
     */
    constructor(authorId: Int? = null, authorName: String? = null): this() {
        this.authorId = authorId
        this.authorName = authorName
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised JAuthorRecord
     */
    constructor(value: codetest.bookstore.db.generated.tables.pojos.JAuthor?): this() {
        if (value != null) {
            this.authorId = value.authorId
            this.authorName = value.authorName
            resetChangedOnNotNull()
        }
    }
}
