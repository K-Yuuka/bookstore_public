/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package codetest.bookstore.api.generated.controller

import codetest.bookstore.api.generated.model.Book
import codetest.bookstore.api.generated.model.BookNameRequest
import codetest.bookstore.api.generated.model.Error
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired


import kotlin.collections.List
import kotlin.collections.Map

@RequestMapping("\${api.base-path:}")
interface BookApi {

    @Operation(
        tags = ["book",],
        summary = "書籍を削除",
        operationId = "bookBookIdDelete",
        description = """登録されている書籍を削除します""",
        responses = [
            ApiResponse(responseCode = "204", description = "削除成功"),
            ApiResponse(responseCode = "404", description = "Not found", content = [Content(schema = Schema(implementation = Error::class))]),
            ApiResponse(responseCode = "200", description = "An unexpected exception occurred", content = [Content(schema = Schema(implementation = Error::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/book/{bookId}"],
            produces = ["application/json"]
    )
    fun bookBookIdDelete(@Parameter(description = "対象の書籍IDを指定します", required = true) @PathVariable("bookId") bookId: kotlin.Int): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["book",],
        summary = "書籍名の変更",
        operationId = "bookBookIdPut",
        description = """ 指定された書籍IDの書籍名を変更します。変更後の書籍名と著者の組み合わせがすでに登録済みである場合はエラーとなります。""",
        responses = [
            ApiResponse(responseCode = "204", description = "成功"),
            ApiResponse(responseCode = "400", description = "Bad request", content = [Content(schema = Schema(implementation = Error::class))]),
            ApiResponse(responseCode = "404", description = "Not found", content = [Content(schema = Schema(implementation = Error::class))]),
            ApiResponse(responseCode = "200", description = "An unexpected exception occurred", content = [Content(schema = Schema(implementation = Error::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/book/{bookId}"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    fun bookBookIdPut(@Parameter(description = "変更対象の書籍IDを指定します", required = true) @PathVariable("bookId") bookId: kotlin.Int,@Parameter(description = "", required = true) @RequestBody bookNameRequest: BookNameRequest): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["book",],
        summary = "書籍の検索",
        operationId = "bookGet",
        description = """指定された書籍名で書籍を検索します。部分一致で検索します。""",
        responses = [
            ApiResponse(responseCode = "200", description = "検索成功", content = [Content(array = ArraySchema(schema = Schema(implementation = Book::class)))]),
            ApiResponse(responseCode = "404", description = "Not found", content = [Content(schema = Schema(implementation = Error::class))]),
            ApiResponse(responseCode = "200", description = "An unexpected exception occurred", content = [Content(schema = Schema(implementation = Error::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/book"],
            produces = ["application/json"]
    )
    fun bookGet(@Parameter(description = "書籍名を指定します。指定がない場合は登録されている書籍すべてを取得します。") @RequestParam(value = "bookName", required = false) bookName: kotlin.String?): ResponseEntity<List<Book>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
