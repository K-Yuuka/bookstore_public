/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package codetest.bookstore.api.generated.controller


import codetest.bookstore.api.generated.model.Author
import codetest.bookstore.api.generated.model.AuthorNameRequest
import codetest.bookstore.api.generated.model.Error
import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.Parameter
import io.swagger.v3.oas.annotations.media.ArraySchema
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.media.Schema
import io.swagger.v3.oas.annotations.responses.ApiResponse
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*

@RequestMapping("\${api.base-path:}")
interface AuthorApi {

    @Operation(
        tags = ["author"],
        summary = "著者を削除",
        operationId = "authorAuthorIdDelete",
        description = """指定された著者IDの著者を削除します。書籍に紐づいている場合、削除に失敗します。""",
        responses = [
            ApiResponse(responseCode = "204", description = "Success operation"),
            ApiResponse(
                responseCode = "404",
                description = "Not found",
                content = [Content(schema = Schema(implementation = Error::class))]
            ),
            ApiResponse(
                responseCode = "409",
                description = "Conflict",
                content = [Content(schema = Schema(implementation = Error::class))]
            ),
            ApiResponse(
                responseCode = "200",
                description = "An unexpected exception occurred",
                content = [Content(schema = Schema(implementation = Error::class))]
            )
        ]
    )
    @RequestMapping(
        method = [RequestMethod.DELETE],
        value = ["/author/{authorId}"],
        produces = ["application/json"]
    )
    fun authorAuthorIdDelete(
        @Parameter(
            description = "著者IDを指定します",
            required = true
        ) @PathVariable("authorId") authorId: Int
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["author"],
        summary = "著者名の変更",
        operationId = "authorAuthorIdPut",
        description = """指定された著者IDの著者名を変更します。変更後の著者名がすでに登録済みである場合はエラーとなります。""",
        responses = [
            ApiResponse(responseCode = "204", description = "Success operation"),
            ApiResponse(
                responseCode = "400",
                description = "Bad request",
                content = [Content(schema = Schema(implementation = Error::class))]
            ),
            ApiResponse(
                responseCode = "404",
                description = "Not found",
                content = [Content(schema = Schema(implementation = Error::class))]
            ),
            ApiResponse(
                responseCode = "409",
                description = "Conflict",
                content = [Content(schema = Schema(implementation = Error::class))]
            ),
            ApiResponse(
                responseCode = "200",
                description = "An unexpected exception occurred",
                content = [Content(schema = Schema(implementation = Error::class))]
            )
        ]
    )
    @RequestMapping(
        method = [RequestMethod.PUT],
        value = ["/author/{authorId}"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun authorAuthorIdPut(
        @Parameter(
            description = "著者IDを指定します",
            required = true
        ) @PathVariable("authorId") authorId: Int,
        @Parameter(
            description = "",
            required = true
        ) @RequestBody authorNameRequest: AuthorNameRequest
    ): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        tags = ["author"],
        summary = "著者の検索",
        operationId = "authorGet",
        description = """指定された著者名で著者を検索します。部分一致で検索します。""",
        responses = [
            ApiResponse(
                responseCode = "200",
                description = "Success operation",
                content = [Content(array = ArraySchema(schema = Schema(implementation = Author::class)))]
            ),
            ApiResponse(
                responseCode = "404",
                description = "Not found",
                content = [Content(schema = Schema(implementation = Error::class))]
            ),
            ApiResponse(
                responseCode = "200",
                description = "An unexpected exception occurred",
                content = [Content(schema = Schema(implementation = Error::class))]
            )
        ]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/author"],
        produces = ["application/json"]
    )
    fun authorGet(
        @Parameter(description = "著者名を指定します。指定がない場合は登録されている著者すべてを取得します。") @RequestParam(
            value = "authorName",
            required = false
        ) authorName: String?
    ): ResponseEntity<List<Author>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
